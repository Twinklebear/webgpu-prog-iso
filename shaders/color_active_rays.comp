#version 450 core

#include "util.glsl"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std140) uniform VolumeParams
{
    uvec4 volume_dims;
    uvec4 padded_dims;
    vec4 volume_scale;
    uint max_bits;
    float isovalue;
    uint image_width;
};

layout(set = 0, binding = 1, std430) buffer RayActive
{
    uint ray_active[];
};

uniform layout(set = 0, binding = 2, rgba8) readonly image2D render_target_copy;
uniform layout(set = 0, binding = 3, rgba8) writeonly image2D render_target;

void main() {
    if (gl_GlobalInvocationID.x >= image_width) {
        return;
    }
    // Mark the pixels active, speculated ray-block intersections refer to these pixels
    uint ray_index = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * image_width;
    if (ray_active[ray_index] == 1) {
        ivec2 pixel_coords = ivec2(ray_index % image_width, ray_index / image_width);
        vec4 color = imageLoad(render_target_copy, pixel_coords);
        imageStore(render_target, pixel_coords, vec4(1.f, 0.f, 0.f, 1.f));
    } else {
        ivec2 pixel_coords = ivec2(ray_index % image_width, ray_index / image_width);
        vec4 color = imageLoad(render_target_copy, pixel_coords);
        if (color.r == 1.f) {
            imageStore(render_target, pixel_coords, vec4(1.f, 1.f, 1.f, 1.f));
        }
    }
}

